<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="StudentMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="student" type="study.java.myschool.model.Student">
		<!-- Beans의 멤버변수(property)이름과 
			대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="studno" column="studno" />
		<result property="name" column="name" />
		<result property="userid" column="userid" />
		<result property="grade" column="grade" />
		<result property="idnum" column="idnum" />
		<result property="birthdate" column="birthdate" />
		<result property="tel" column="tel" />
		<result property="height" column="height" />
		<result property="weight" column="weight" />
		<result property="deptno" column="deptno" />
		<result property="profno" column="profno" />
	</resultMap>
	
	<!--
		데이터 저장을 위한 기능 정의
		<insert id="메서드이름" parameterType="파라미터의 데이터 타입" useGeneratedKeys="자동증가 일련번호값 리턴 여부" keyProperty="자동증가 일련번호 컬럼명">
	-->
	<insert id="insertStudentItem" parameterType="study.java.myschool.model.Student" useGeneratedKeys="true"
		keyProperty="studno">
		<!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
		INSERT INTO student (name, userid, grade, idnum, birthdate, tel, height, weight, deptno, profno) VALUES (#{name}, #{userid}, #{grade}, #{idnum}, #{birthdate}, #{tel}, #{height}, #{weight}, #{deptno}, #{profno});
	</insert>
	
	
	<delete id="deleteStudentItem" 
			parameterType="study.java.myschool.model.Student">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터가 치환된다. -->
		DELETE FROM student WHERE studno=#{studno};
	</delete>
	
	<!--
		데이터 갱신을 위한 기능 정의
		<update id="메서드이름" parameterType="파라미터의 데이터 타입">
	-->
	<update id="updateStudentItem" parameterType="study.java.myschool.model.Student">
		<!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
		UPDATE student SET name=#{name}, userid=#{userid}, grade=#{grade}, idnum=#{idnum}, birthdate=#{birthdate}, tel=#{tel}, height=#{height}, weight=#{weight}, deptno=#{deptno}, profno=#{profno} WHERE studno=#{studno};
	</update>
	
	<!--
		단일행 조회를 위한 기능 정의
		<select id="메서드이름" parameterType="파라미터의 데이터 타입" resultMap="리턴될 Beans이름">
	-->
	<select id="selectStudentItem" parameterType="study.java.myschool.model.Student" resultMap="student">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터가 치환된다. -->
		SELECT studno, name, userid, grade, idnum, birthdate, tel, height, weight, deptno, profno FROM student WHERE studno=#{studno};
	</select>

	<!--
		다중행 조회를 위한 기능 정의
		<select id="메서드이름" resultMap="리턴될 Beans이름">
	-->
	<select id="selectStudentList" resultMap="student">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT studno, name, userid, grade, idnum, birthdate, tel, height, weight, deptno, profno FROM student;
	</select>
	
	<!-- 특정 학과에 소속된 모든 학생을 삭제한다. -->
	<delete id="remove_student_by_deptno" parameterType="study.java.myschool.model.Student">
		DELETE FROM student WHERE deptno=#{deptno};
	</delete>

</mapper>